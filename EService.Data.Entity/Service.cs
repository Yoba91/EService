//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EService.Data.Entity
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class Service : INotifyPropertyChanged, IIdentifier
    {
        long rowid;
        string fullName;
        string shortName;
        string description;
        long price;
        ICollection<ServiceForModel> servicesForModels;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Service()
        {
            this.ServicesForModels = new HashSet<ServiceForModel>();
        }

        public long Rowid { get { return rowid; } set { rowid = value; OnPropertyChanged("Rowid"); } }
        public string FullName { get { return fullName; } set { fullName = value; OnPropertyChanged("FullName"); } }
        public string ShortName { get { return shortName; } set { shortName = value; OnPropertyChanged("ShortName"); } }
        public string Description { get { return description; } set { description = value; OnPropertyChanged("Description"); } }
        public long Price { get { return price; } set { price = value; OnPropertyChanged("Price"); } }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServiceForModel> ServicesForModels { get { return servicesForModels; } set { servicesForModels = value; OnPropertyChanged("ServicesForModels"); } }

        public event PropertyChangedEventHandler PropertyChanged;

        public void OnPropertyChanged([CallerMemberName] string property = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));
        }
    }
}
