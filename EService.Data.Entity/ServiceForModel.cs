//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EService.Data.Entity
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class ServiceForModel : INotifyPropertyChanged
    {
        long rowid;
        long rowidModel;
        long rowidService;
        Model model;
        Service service;
        ICollection<ServiceDone> servicesDone;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ServiceForModel()
        {
            this.ServicesDone = new HashSet<ServiceDone>();
        }
    
        public long Rowid { get { return rowid; } set { rowid = value; OnPropertyChanged("Rowid"); } }
        public long RowidModel { get { return rowidModel; } set { rowidModel = value; OnPropertyChanged("RowidModel"); } }
        public long RowidService { get { return rowidService; } set { rowidService = value; OnPropertyChanged("RowidService"); } }

        public virtual Model Model { get { return model; } set { model = value; OnPropertyChanged("Model"); } }
        public virtual Service Service { get { return service; } set { service = value; OnPropertyChanged("Service"); } }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServiceDone> ServicesDone { get { return servicesDone; } set { servicesDone = value; OnPropertyChanged("ServicesDone"); } }

        public event PropertyChangedEventHandler PropertyChanged;

        public void OnPropertyChanged([CallerMemberName] string property = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));
        }
    }
}
